/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.discovery.portal.api;

import za.co.discovery.portal.model.AuthenticationRequest;
import za.co.discovery.portal.model.AuthenticationResponse;
import za.co.discovery.portal.model.CreateUserRequest;
import za.co.discovery.portal.model.UserResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-28T19:32:39.467+02:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Logs the user in", notes = "", response = AuthenticationResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "If the user has been logged in or not", response = AuthenticationResponse.class) })
    
    @RequestMapping(value = "user/authenticate",
        method = RequestMethod.POST)
    ResponseEntity<AuthenticationResponse> userAuthenticatePost(@ApiParam(value = "Users login credentials" ,required=true )  @Valid @RequestBody AuthenticationRequest body);


    @ApiOperation(value = "Retrieves user details", notes = "", response = UserResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Details of the logged in user", response = UserResponse.class) })
    
    @RequestMapping(value = "user",
        method = RequestMethod.GET)
    ResponseEntity<UserResponse> userGet( @NotNull@ApiParam(value = "Username of user", required = true) @RequestParam(value = "username", required = true) String username);


    @ApiOperation(value = "Registers a profile for the user", notes = "", response = UserResponse.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Details of the logged in user", response = UserResponse.class) })
    
    @RequestMapping(value = "user",
        method = RequestMethod.POST)
    ResponseEntity<UserResponse> userPost(@ApiParam(value = "Details for the registering user" ,required=true )  @Valid @RequestBody CreateUserRequest body);

}
